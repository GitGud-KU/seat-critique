%script{:src => "//maps.google.com/maps/api/js?key=#{ENV['GOOGLE_MAPS_API']}"}
%script{:src => "//cdn.rawgit.com/mahnunchik/markerclustererplus/master/dist/markerclusterer.min.js"}
%script{:src => "//cdn.rawgit.com/printercu/google-maps-utility-library-v3-read-only/master/infobox/src/infobox_packed.js", :type => "text/javascript"}

.container
  %h1 Buildings

  #map

  .separator

  = link_to "Create New Building", new_building_path, :class => 'btn btn-primary'

  .separator

  - if @buildings.empty?
    .panel.panel-warning
      .panel-heading{ :style => "text-align:center;"}
        = "There are no buildings."
  - else
    %table{:class => "table table-striped table-hover"}
      %thead
        %tr
          %th{:style => "width:25%;"} Name
          %th{:style => "width:30%;"} Address
          %th{:style => "width:10%;"} Latitude
          %th{:style => "width:10%;"} Longitude
          %th{:style => "width:25%;"} Actions
      %tbody
        - @buildings.order(:name).each do |building|
          %tr
            %td
              = building.name
            %td
              = building.address
            %td
              = building.latitude
            %td
              = building.longitude
            %td
              = link_to "Show", building_path(building), :class => 'btn btn-default'
              = link_to "Edit", edit_building_path(building), :class => 'btn btn-default'
              = link_to "Destroy", building_path(building), :class => 'btn btn-danger', method: :delete, :data => {confirm: 'Are you sure you want to delete this building?'}

:javascript
  let mapStyles = [
            {elementType: 'geometry', stylers: [{color: '#242f3e'}]},
            {elementType: 'labels.text.stroke', stylers: [{color: '#242f3e'}]},
            {elementType: 'labels.text.fill', stylers: [{color: '#746855'}]},
            {
              featureType: 'administrative.locality',
              elementType: 'labels.text.fill',
              stylers: [{color: '#d59563'}]
            },
            {
              featureType: 'poi',
              elementType: 'labels.text.fill',
              stylers: [{color: '#d59563'}]
            },
            {
              featureType: 'poi.park',
              elementType: 'geometry',
              stylers: [{color: '#263c3f'}]
            },
            {
              featureType: 'poi.park',
              elementType: 'labels.text.fill',
              stylers: [{color: '#6b9a76'}]
            },
            {
              featureType: 'road',
              elementType: 'geometry',
              stylers: [{color: '#38414e'}]
            },
            {
              featureType: 'road',
              elementType: 'geometry.stroke',
              stylers: [{color: '#212a37'}]
            },
            {
              featureType: 'road',
              elementType: 'labels.text.fill',
              stylers: [{color: '#9ca5b3'}]
            },
            {
              featureType: 'road.highway',
              elementType: 'geometry',
              stylers: [{color: '#746855'}]
            },
            {
              featureType: 'road.highway',
              elementType: 'geometry.stroke',
              stylers: [{color: '#1f2835'}]
            },
            {
              featureType: 'road.highway',
              elementType: 'labels.text.fill',
              stylers: [{color: '#f3d19c'}]
            },
            {
              featureType: 'transit',
              elementType: 'geometry',
              stylers: [{color: '#2f3948'}]
            },
            {
              featureType: 'transit.station',
              elementType: 'labels.text.fill',
              stylers: [{color: '#d59563'}]
            },
            {
              featureType: 'water',
              elementType: 'geometry',
              stylers: [{color: '#17263c'}]
            },
            {
              featureType: 'water',
              elementType: 'labels.text.fill',
              stylers: [{color: '#515c6d'}]
            },
            {
              featureType: 'water',
              elementType: 'labels.text.stroke',
              stylers: [{color: '#17263c'}]
            }
          ]
  handler = Gmaps.build('Google');
  handler.buildMap({ provider: { styles: mapStyles }, internal: {id: 'map'}}, function(){
    markers = handler.addMarkers(#{raw @hash.to_json});
    handler.bounds.extendWith(markers);
    handler.fitMapToBounds();
  });
